type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/domain/payment/PaymentResponse.java
  visible: true
  text: |
    package account.domain.payment;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class PaymentResponse {

        private static final String DEFAULT_STATUS = "Added successfully!";

        private String status;

        {
            this.status = DEFAULT_STATUS;
        }
    }
  learner_created: true
- name: src/account/config/UserDetailsImpl.java
  visible: true
  text: |
    package account.config;

    import account.model.user.Group;
    import account.model.user.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;
    import java.util.stream.Collectors;

    public class UserDetailsImpl implements UserDetails {

        private final String email;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            this.email = user.getEmail();
            this.password = user.getPassword();
            this.rolesAndAuthorities = user.getGroups().stream()
                    .map(Group::getRole)
                    .map(role -> new SimpleGrantedAuthority(role.name()))
                    .collect(Collectors.toList());
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return email;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/domain/payment/PaymentDto.java
  visible: true
  text: |
    package account.domain.payment;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public class PaymentDto {

        private String name;
        private String lastname;
        private String period;
        private String salary;
    }
  learner_created: true
- name: src/account/model/payment/PaymentRequest.java
  visible: true
  text: |
    package account.model.payment;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class PaymentRequest {

        private String employee;
        private String period;
        private Long salary;
    }
  learner_created: true
- name: src/account/exception/admin/RoleUpdateException.java
  visible: true
  text: |
    package account.exception.admin;

    public class RoleUpdateException extends Exception {
        public RoleUpdateException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/model/user/Role.java
  visible: true
  text: |
    package account.model.user;

    public enum Role {

        ROLE_ACCOUNTANT,
        ROLE_ADMINISTRATOR,
        ROLE_USER,
    }
  learner_created: true
- name: src/account/model/user/Group.java
  visible: true
  text: |
    package account.model.user;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;

    @Entity
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Table(name = "roles")
    public class Group {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "group_id")
        private Long id;

        @Enumerated(EnumType.STRING)
        @Column(unique = true, updatable = false)
        private Role role;

        public Group(Role role) {
            this.role = role;
        }
    }
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.payment.Payment;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;
    import java.util.Optional;

    public interface PaymentRepository extends CrudRepository<Payment, Long> {

        List<Payment> findAllByEmployee_EmailIgnoreCaseOrderByPeriodDesc(String email);

        Optional<Payment> findByEmployee_EmailIgnoreCaseAndPeriod(String employee, String period);
    }
  learner_created: true
- name: src/account/exception/admin/AdminDeletionException.java
  visible: true
  text: |
    package account.exception.admin;

    public class AdminDeletionException extends Exception {

        public AdminDeletionException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/service/group/IGroupService.java
  visible: true
  text: |
    package account.service.group;

    import account.model.user.Group;

    import java.util.Optional;

    public interface IGroupService {

        Optional<Group> findByRole(String role);
        Group save(Group group);
    }
  learner_created: true
- name: src/account/model/user/PasswordChangeRequest.java
  visible: true
  text: |
    package account.model.user;

    import account.util.Blacklist;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.AssertFalse;
    import javax.validation.constraints.AssertTrue;
    import javax.validation.constraints.NotNull;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class PasswordChangeRequest {

        @JsonProperty("new_password")
        @NotNull
        private String password;

        @AssertFalse(message = "The password is in the hacker's database!")
        public boolean isBreached() {
            return this.password != null && Blacklist.contains(this.password);
        }

        @AssertTrue(message = "Password length must be 12 chars minimum!")
        public boolean hasValideLength() {
            return this.password != null && this.password.length() >= 12;
        }
    }
  learner_created: true
- name: src/account/service/payment/PaymentService.java
  visible: true
  text: |
    package account.service.payment;

    import account.domain.payment.PaymentDto;
    import account.domain.payment.PaymentResponse;
    import account.mapper.PaymentMapper;
    import account.model.payment.Payment;
    import account.model.payment.PaymentRequest;
    import account.repository.PaymentRepository;
    import account.exception.payment.PaymentNotFoundException;
    import account.exception.payment.PaymentSavingException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class PaymentService implements IPaymentService {

        private final PaymentRepository paymentRepository;
        private final PaymentMapper paymentMapper;

        @Autowired
        public PaymentService(PaymentRepository paymentRepository, PaymentMapper paymentMapper) {
            this.paymentRepository = paymentRepository;
            this.paymentMapper = paymentMapper;
        }

        @Override
        public List<PaymentDto> findAllByEmail(String email) {
            final List<Payment> payments = this.paymentRepository.findAllByEmployee_EmailIgnoreCaseOrderByPeriodDesc(email);
            return payments.isEmpty() ? List.of() : paymentMapper.mapToList(payments);
        }

        @Override
        public PaymentDto findByEmailAndPeriod(String email, String period) throws PaymentNotFoundException {

            try {
                Payment  payment = paymentRepository.findByEmployee_EmailIgnoreCaseAndPeriod(email, period).orElseThrow();
                return paymentMapper.mapToDto(payment);
            } catch (Exception e) {
                throw new PaymentNotFoundException("Payment not found!: " + e.getMessage());
            }
        }

        @Override
        @Transactional
        public PaymentResponse save(List<PaymentRequest> payments) throws PaymentSavingException {

            for (int i = 1; i < payments.size(); i++) {
                if (payments.get(i - 1).getPeriod().equals(payments.get(i).getPeriod())) {
                    throw new PaymentSavingException("Duplicated entry in payment list");
                }
            }

            for(PaymentRequest request: payments) {
                Optional<Payment> payment = paymentRepository.findByEmployee_EmailIgnoreCaseAndPeriod(request.getEmployee(), request.getPeriod());
                if (payment.isEmpty()) {
                    validateRequest(request);
                    paymentRepository.save(paymentMapper.mapToPayment(request));
                } else {
                    throw new PaymentSavingException("Period must be unique!");
                }
            }
            return new PaymentResponse();
        }

        @Override
        @Transactional
        public PaymentResponse save(PaymentRequest request) throws PaymentSavingException {

            validateRequest(request);

            try {
                var payment = paymentRepository.findByEmployee_EmailIgnoreCaseAndPeriod(
                        request.getEmployee(), request.getPeriod());
                if (payment.isEmpty()){
                    paymentRepository.save(paymentMapper.mapToPayment(request));
                } else {
                    var tmp = payment.get();
                    tmp.setSalary(request.getSalary());
                    paymentRepository.save(tmp);
                }

                return new PaymentResponse("Updated successfully!");
            } catch (Exception e) {
                throw new PaymentSavingException(e.getMessage());
            }
        }

        private boolean isValidPeriod(String period) {

            if (period == null) {
                return true;
            }

            int month = Integer.parseInt(period.split("-")[0]);
            return month <= 0 || month >= 12;
        }

        private void validateRequest(PaymentRequest request) throws PaymentSavingException {
            if (request.getSalary() < 0) {
                throw new PaymentSavingException("Salary can not be negativ!");
            }

            if (isValidPeriod(request.getPeriod())) {
                throw new PaymentSavingException("payment period is not valid!");
            }
        }
    }
  learner_created: true
- name: src/account/exception/admin/UserNotFoundException.java
  visible: true
  text: |
    package account.exception.admin;

    public class UserNotFoundException extends Exception {

        public UserNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.config;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/service/user/UserService.java
  visible: true
  text: |
    package account.service.user;

    import account.domain.user.UserDeletionResponse;
    import account.domain.user.UserDto;
    import account.mapper.UserMapper;
    import account.model.user.Group;
    import account.model.user.Role;
    import account.model.user.RoleUpdateRequest;
    import account.model.user.User;
    import account.repository.UserRepository;
    import account.exception.admin.AdminDeletionException;
    import account.exception.admin.InvalidRoleException;
    import account.exception.admin.RoleUpdateException;
    import account.exception.admin.UserNotFoundException;
    import account.service.group.GroupService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Optional;
    import java.util.function.Predicate;

    @Service
    public class UserService implements IUserService {

        private final UserRepository userRepository;
        private final GroupService groupService;
        private final UserMapper userMapper;

        @Autowired
        public UserService(UserRepository userRepository, GroupService groupService, UserMapper userMapper) {
            this.userRepository = userRepository;
            this.groupService = groupService;
            this.userMapper = userMapper;
        }

        @Override
        public User save(User user) {
            return userRepository.save(user);
        }

        @Override
        public Optional<User> findByEmail(String email) {
            return userRepository.findByEmailIgnoreCase(email);
        }

        @Override
        public List<User> findAll() {
            return userRepository.findAllOrderById();
        }

        @Override
        @Transactional
        public UserDeletionResponse deleteUserByEmail(String email) throws UserNotFoundException, AdminDeletionException {

            var user = userRepository.findByEmailIgnoreCase(email);

            if (user.isPresent()) {
                User existingUser = user.get();
                if (existingUser.isAdmin()) {
                    throw new AdminDeletionException("Can't remove ADMINISTRATOR role!");
                }
                userRepository.delete(existingUser);
                return UserDeletionResponse.builder().user(email).status("Deleted successfully!").build();
            } else {
                throw new UserNotFoundException("User not found!");
            }
        }

        @Override
        @Transactional
        public UserDto updateRole(RoleUpdateRequest request) throws UserNotFoundException, InvalidRoleException, RoleUpdateException, AdminDeletionException {
            var user = userRepository.findByEmailIgnoreCase(request.getEmail());
            if (user.isEmpty()) {
                throw new UserNotFoundException("User not found!");
            } else {
                User userToUpdate = user.get();

                String roleFromRequest = String.format("ROLE_%s", request.getRole());

                if (Arrays.stream(Role.values()).anyMatch(role -> role.name().equals(roleFromRequest))) {
                    var group = groupService.findByRole(roleFromRequest);
                    if (group.isEmpty()) {
                        throw new InvalidRoleException("Role not found!");
                    }

                    Group newGroup = group.get();

                    switch (request.getOperation()) {
                        case "GRANT":
                            return this.grant(userToUpdate, newGroup);
                        case "REMOVE":
                            return revoke(userToUpdate, newGroup);
                        default:
                            throw new RoleUpdateException("Unsupported operation!");
                    }
                } else {
                    throw new InvalidRoleException("Role not found!");
                }
            }
        }

        @Override
        public UserDto grant(User user, Group group) throws RoleUpdateException {
            Role role = group.getRole();

            if ((user.isAdmin() && isBusinessRole().test(role))) {
                throw new RoleUpdateException("The user cannot combine administrative and business roles!");
            }

            if ((!user.isAdmin() && Role.ROLE_ADMINISTRATOR.equals(role))) {
                throw new RoleUpdateException("The user cannot combine administrative and business roles!");
            }

            else {
                user.getGroups().add(group);
                user = this.userRepository.save(user);
                return userMapper.toDto(user);
            }
        }

        @Override
        public UserDto revoke(User user, Group group) throws RoleUpdateException, AdminDeletionException {
            Role role = group.getRole();

            if (user.isAdmin() && Role.ROLE_ADMINISTRATOR.equals(role)) {
                throw new AdminDeletionException("Can't remove ADMINISTRATOR role!");
            }

            if (!user.hasRole(role)) {
                throw new RoleUpdateException("The user does not have a role!");
            }

            if (user.getGroups().size() == 1 && user.hasRole(role)) {
                throw new RoleUpdateException("The user must have at least one role!");
            }

            user.getGroups().remove(group);
            return userMapper.toDto(userRepository.save(user));
        }

        private Predicate<Role> isBusinessRole() {
            return role -> Role.ROLE_USER.equals(role) || Role.ROLE_ACCOUNTANT.equals(role);
        }
    }
  learner_created: true
- name: src/account/domain/user/UserDto.java
  visible: true
  text: |
    package account.domain.user;

    import account.model.user.Role;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import java.util.List;

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public class UserDto {

        private Long id;
        private String name;
        private String lastname;
        private String email;
        private List<Role> roles;
    }
  learner_created: true
- name: src/account/mapper/PaymentMapper.java
  visible: true
  text: |
    package account.mapper;

    import account.domain.payment.PaymentDto;
    import account.model.payment.Payment;
    import account.model.payment.PaymentRequest;
    import account.model.user.User;
    import account.service.user.UserService;
    import account.util.PaymentUtil;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    import java.util.List;
    import java.util.NoSuchElementException;
    import java.util.Optional;
    import java.util.stream.Collectors;

    @Component
    public class PaymentMapper {

        private final UserService userService;

        @Autowired
        public PaymentMapper(UserService userService) {
            this.userService = userService;
        }

        public Payment mapToPayment(PaymentRequest request) throws NoSuchElementException {


            final Optional<User> employee = userService.findByEmail(request.getEmployee());
            return Payment.builder()
                    .employee(employee.orElseThrow())
                    .period(request.getPeriod())
                    .salary(request.getSalary())
                    .build();
        }

        public PaymentDto mapToDto(Payment payment) {
            return PaymentDto.builder().name(payment.getEmployee().getName())
                    .lastname(payment.getEmployee().getLastname())
                    .period(PaymentUtil.convertMonthFromPeriodToString(payment.getPeriod()))
                    .salary(PaymentUtil.getFullSalary(payment.getSalary()))
                    .build();
        }

        public List<PaymentDto> mapToList(List<Payment> payments) {
            return payments.stream().map(this::mapToDto).collect(Collectors.toList());
        }
    }
  learner_created: true
- name: src/account/util/Blacklist.java
  visible: true
  text: |
    package account.util;

    import java.util.Set;

    public class Blacklist {

        public static final Set<String> passwords = Set.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");

        public static boolean contains(String password) {
            return passwords.contains(password);
        }
    }
  learner_created: true
- name: src/account/exception/payment/PaymentSavingException.java
  visible: true
  text: |
    package account.exception.payment;

    public class PaymentSavingException extends Exception {

        public PaymentSavingException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/handler/AccountServiceExceptionHandler.java
  visible: true
  text: |
    package account.handler;

    import account.domain.AccountServiceCustomErrorMessage;
    import account.exception.*;
    import account.exception.admin.AdminDeletionException;
    import account.exception.admin.InvalidRoleException;
    import account.exception.admin.RoleUpdateException;
    import account.exception.admin.UserNotFoundException;
    import account.exception.payment.PasswordUpdateException;
    import account.exception.payment.PaymentNotFoundException;
    import account.exception.payment.PaymentSavingException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    import javax.servlet.http.HttpServletRequest;
    import javax.validation.ConstraintViolationException;
    import java.time.LocalDateTime;

    @ControllerAdvice
    public class AccountServiceExceptionHandler {

        @ExceptionHandler({AccountServiceException.class})
        public ResponseEntity<AccountServiceCustomErrorMessage> handleBadRequest(Exception e, HttpServletRequest request) {
            AccountServiceCustomErrorMessage body = AccountServiceCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.BAD_REQUEST.value())
                    .error(e.getMessage())
                    .message(AccountServiceCustomErrorMessage.DEFAULT_MESSAGE)
                    .path(request.getRequestURI())
                    .build();

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler({MethodArgumentNotValidException.class})
        public ResponseEntity<AccountServiceCustomErrorMessage> handleValidationError(MethodArgumentNotValidException e,
                                                                                      HttpServletRequest request) {
            AccountServiceCustomErrorMessage body = AccountServiceCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.BAD_REQUEST.value())
                    .error(HttpStatus.BAD_REQUEST.getReasonPhrase())
                    .message(e.getBindingResult().getAllErrors().get(0).getDefaultMessage())
                    .path(request.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler({PasswordUpdateException.class, PaymentSavingException.class, PaymentNotFoundException.class,
                ConstraintViolationException.class, AdminDeletionException.class, RoleUpdateException.class})
        public ResponseEntity<AccountServiceCustomErrorMessage> handleChangeException(Exception exception,
                                                                                      HttpServletRequest request){
            AccountServiceCustomErrorMessage body = AccountServiceCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.BAD_REQUEST.value())
                    .error(HttpStatus.BAD_REQUEST.getReasonPhrase())
                    .message(exception.getMessage())
                    .path(request.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler({UserNotFoundException.class, InvalidRoleException.class})
        public ResponseEntity<AccountServiceCustomErrorMessage> handleNotFound(Exception exception, HttpServletRequest request) {
            AccountServiceCustomErrorMessage body = AccountServiceCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.NOT_FOUND.value())
                    .error(HttpStatus.NOT_FOUND.getReasonPhrase())
                    .message(exception.getMessage())
                    .path(request.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
        }

        @ExceptionHandler({AccessDeniedException.class})
        public ResponseEntity<AccountServiceCustomErrorMessage> handleAccessDenied(HttpServletRequest request) {
            AccountServiceCustomErrorMessage body = AccountServiceCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.FORBIDDEN.value())
                    .error(HttpStatus.FORBIDDEN.getReasonPhrase())
                    .message("Access Denied!")
                    .path(request.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.FORBIDDEN);
        }
    }
  learner_created: true
- name: src/account/service/user/IUserService.java
  visible: true
  text: |
    package account.service.user;

    import account.domain.user.UserDeletionResponse;
    import account.domain.user.UserDto;
    import account.model.user.Group;
    import account.model.user.RoleUpdateRequest;
    import account.model.user.User;
    import account.exception.admin.AdminDeletionException;
    import account.exception.admin.InvalidRoleException;
    import account.exception.admin.RoleUpdateException;
    import account.exception.admin.UserNotFoundException;

    import java.util.List;
    import java.util.Optional;

    public interface IUserService {

        User save(User user);

        Optional<User> findByEmail(String email);

        List<User> findAll();

        UserDeletionResponse deleteUserByEmail(String email) throws UserNotFoundException, AdminDeletionException;

        UserDto updateRole(RoleUpdateRequest request) throws UserNotFoundException, InvalidRoleException, RoleUpdateException, AdminDeletionException;

        UserDto grant(User user, Group group) throws RoleUpdateException;

        UserDto revoke(User user, Group group) throws RoleUpdateException, AdminDeletionException;
    }
  learner_created: true
- name: src/account/repository/UserRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.user.User;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;
    import java.util.Optional;

    public interface UserRepository extends CrudRepository<User, Long> {

        Optional<User> findByEmailIgnoreCase(String email);
        @Query(value = "SELECT * FROM USER r ORDER BY r.user_id ASC", nativeQuery = true)
        List<User> findAllOrderById();

    }
  learner_created: true
- name: src/account/service/group/GroupService.java
  visible: true
  text: |
    package account.service.group;

    import account.model.user.Group;
    import account.model.user.Role;
    import account.repository.GroupRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;
    import java.util.Optional;

    @Service
    public class GroupService implements IGroupService {

        private final GroupRepository repository;

        @Autowired
        public GroupService(GroupRepository repository) {
            this.repository = repository;
        }

        @Override
        public Optional<Group> findByRole(String role) {
            return this.repository.findByRole(Role.valueOf(role));
        }

        @Override
        @Transactional
        public Group save(Group group) {
            var tmp = this.repository.findByRole(group.getRole());
            if (tmp.isPresent()) {
                group.setId(tmp.get().getId());
                return this.repository.save(group);
            }
            return repository.save(group);
        }
    }
  learner_created: true
- name: src/account/service/user/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.service.user;

    import account.config.UserDetailsImpl;
    import account.model.user.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.Optional;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        private final UserService userService;

        public UserDetailsServiceImpl(@Autowired UserService userService) {
            this.userService = userService;
        }

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            Optional<User> user = userService.findByEmail(email);
            if (user.isPresent()) {
                return new UserDetailsImpl(user.get());
            } else {
                throw new UsernameNotFoundException("Not found " + email);
            }
        }
    }
  learner_created: true
- name: src/account/exception/payment/PasswordUpdateException.java
  visible: true
  text: |
    package account.exception.payment;

    public class PasswordUpdateException extends Exception {

        public PasswordUpdateException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/model/user/User.java
  visible: true
  text: |
    package account.model.user;

    import account.util.Blacklist;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import javax.validation.constraints.*;
    import java.util.LinkedHashSet;
    import java.util.Set;
    import java.util.stream.Collectors;

    @Entity
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @SequenceGenerator(name = "sequence", sequenceName = "UserSeq")
    public class User {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO, generator = "sequence")
        @Column(name = "user_id")
        private Long id;

        @NotEmpty(message = "The user name must not be empty")
        private String name;

        @NotEmpty(message = "last name must not be empty")
        private String lastname;

        @NotEmpty(message = "Email must not be empty")
        @Pattern(regexp = ".*@acme\\.com", message = "Email from given domain not allowed")
        private String email;

        @NotNull
        private String password;

        @ManyToMany(fetch = FetchType.EAGER)
        private Set<Group> groups = new LinkedHashSet<>();

        @AssertFalse(message = "The password is in the hacker's database!")
        public boolean isBreached() {
            return this.password != null && Blacklist.contains(this.password);
        }

        @AssertTrue(message = "The password length must be at least 12 chars!")
        public boolean hasValideLength() {
            return this.password != null && this.password.length() >= 12;
        }

        public boolean isAdmin() {
            return this.groups.stream().map(Group::getRole).collect(Collectors.toList()).contains(Role.ROLE_ADMINISTRATOR);
        }

        public boolean hasRole(Role role) {
            return groups.stream().map(Group::getRole).anyMatch(role1 -> role1.equals(role));
        }
    }
  learner_created: true
- name: src/account/domain/user/PasswordChangeResponse.java
  visible: true
  text: |
    package account.domain.user;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    @Builder
    @AllArgsConstructor
    public class PasswordChangeResponse {

        public static final String DEFAULT_STATUS = "The password has been updated successfully";

        private String email;
        private String status;
    }
  learner_created: true
- name: src/account/exception/admin/InvalidRoleException.java
  visible: true
  text: |
    package account.exception.admin;

    public class InvalidRoleException extends Exception {

        public InvalidRoleException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/controller/PaymentController.java
  visible: true
  text: |
    package account.controller;

    import account.domain.payment.PaymentResponse;
    import account.model.payment.PaymentRequest;
    import account.service.payment.PaymentService;
    import account.util.PaymentUtil;
    import account.exception.payment.PaymentNotFoundException;
    import account.exception.payment.PaymentSavingException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @RequestMapping(path = "/api", produces = MediaType.APPLICATION_JSON_VALUE)
    @Validated
    public class PaymentController {

        private final PaymentService paymentService;

        @Autowired
        public PaymentController(PaymentService paymentService) {
            this.paymentService = paymentService;
        }

        @PostMapping(path = "/acct/payments", consumes = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<PaymentResponse> update(@Valid @RequestBody List<PaymentRequest> payrolls) throws PaymentSavingException {
            return ResponseEntity.ok(paymentService.save(payrolls));
        }

        @PutMapping("/acct/payments")
        public ResponseEntity<PaymentResponse> update(@Valid @RequestBody PaymentRequest request) throws PaymentSavingException {
            return ResponseEntity.ok(this.paymentService.save(request));
        }

        @GetMapping(path = "/empl/payment")
        public ResponseEntity<?> getPayroll(@AuthenticationPrincipal UserDetails userDetails,
                                            @RequestParam(required = false) String period) throws PaymentNotFoundException, PaymentSavingException {

            if (period == null) {
                return ResponseEntity.ok(paymentService.findAllByEmail(userDetails.getUsername()));
            } else if (PaymentUtil.isPeriodValid().test(period)) {
                return ResponseEntity.ok(paymentService.findByEmailAndPeriod(userDetails.getUsername(), period));
            } else {
                throw new PaymentSavingException("Wrong date in request!");
            }
        }
    }
  learner_created: true
- name: src/account/mapper/DataLoader.java
  visible: true
  text: |
    package account.mapper;

    import account.model.user.Group;
    import account.model.user.Role;
    import account.service.group.GroupService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.context.event.ContextRefreshedEvent;
    import org.springframework.stereotype.Component;

    @Component
    public class DataLoader implements ApplicationListener<ContextRefreshedEvent> {

        private final GroupService groupService;

        @Autowired
        public DataLoader(GroupService groupService) {
            this.groupService = groupService;
        }


        @Override
        public void onApplicationEvent(ContextRefreshedEvent event) {
            createRoles();
        }

        private void createRoles() {
            try {
                groupService.save(new Group(Role.ROLE_ADMINISTRATOR));
                groupService.save(new Group(Role.ROLE_ACCOUNTANT));
                groupService.save(new Group(Role.ROLE_USER));
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }
  learner_created: true
- name: src/account/service/payment/IPaymentService.java
  visible: true
  text: |
    package account.service.payment;

    import account.domain.payment.PaymentDto;
    import account.domain.payment.PaymentResponse;
    import account.model.payment.PaymentRequest;
    import account.exception.payment.PasswordUpdateException;
    import account.exception.payment.PaymentNotFoundException;
    import account.exception.payment.PaymentSavingException;

    import java.util.List;

    public interface IPaymentService {

        List<PaymentDto> findAllByEmail(String email);
        PaymentDto findByEmailAndPeriod(String email, String period) throws PaymentNotFoundException;
        PaymentResponse save(List<PaymentRequest> payments) throws PasswordUpdateException, PaymentSavingException;
        PaymentResponse save(PaymentRequest payment) throws PasswordUpdateException, PaymentSavingException;
    }
  learner_created: true
- name: src/account/util/PaymentUtil.java
  visible: true
  text: |
    package account.util;

    import java.time.Month;
    import java.time.format.TextStyle;
    import java.util.Locale;
    import java.util.function.Predicate;

    public class PaymentUtil {

        private static final int CENT = 100;

        public static String getFullSalary(Long salary) {
            return String.format("%s dollar(s) %s cent(s)", salary/ CENT,salary % CENT);
        }

        public static String convertMonthFromPeriodToString(String period) {
            String[] periodArr = period.split("-");
            int month = Integer.parseInt(periodArr[0]);

            return String.format("%s-%s", Month.of(month).getDisplayName(TextStyle.FULL_STANDALONE ,
                    Locale.US), periodArr[1]);
        }

        public static Predicate<String> isPeriodValid() {
            return period -> {
                if (!period.matches("\\d{2}-\\d{4}")) {
                    return false;
                }
                final int i = Integer.parseInt(period.split("-")[0]);
                return i >= 0 && i <= 12;
            };
        }
    }
  learner_created: true
- name: src/account/controller/UserController.java
  visible: true
  text: |
    package account.controller;

    import account.domain.user.PasswordChangeResponse;
    import account.domain.user.UserDeletionResponse;
    import account.exception.admin.AdminDeletionException;
    import account.exception.admin.InvalidRoleException;
    import account.exception.admin.RoleUpdateException;
    import account.exception.admin.UserNotFoundException;
    import account.exception.payment.PasswordUpdateException;
    import account.model.user.PasswordChangeRequest;
    import account.model.user.Role;
    import account.model.user.RoleUpdateRequest;
    import account.model.user.User;
    import account.service.group.GroupService;
    import account.exception.*;
    import account.domain.user.UserDto;
    import account.mapper.UserMapper;
    import account.service.user.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @RequestMapping(path = "/api", produces = MediaType.APPLICATION_JSON_VALUE)
    @Validated
    public class UserController {

        private final UserService userService;
        private final UserMapper mapper;
        private final PasswordEncoder encoder;
        private final GroupService groupService;

        @Autowired
        public UserController(UserService userService, UserMapper mapper, PasswordEncoder encoder, GroupService groupService) {
            this.userService = userService;
            this.mapper = mapper;
            this.encoder = encoder;
            this.groupService = groupService;
        }

        @PostMapping(path = "/auth/signup", consumes = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<UserDto> signup(@Valid @RequestBody User user) throws AccountServiceException {

            if (userService.findByEmail(user.getEmail()).isPresent()) {
                throw new AccountServiceException(HttpStatus.BAD_REQUEST.getReasonPhrase());
            }

            List<User> users = userService.findAll();
            var group = groupService.findByRole(users.isEmpty() ? Role.ROLE_ADMINISTRATOR.name() : Role.ROLE_USER.name());

            user.setEmail(user.getEmail().toLowerCase());
            user.getGroups().add(group.orElseThrow());
            user.setPassword(encoder.encode(user.getPassword()));
            return ResponseEntity.ok(mapper.toDto(userService.save(user)));
        }

        @PostMapping(path = "/auth/changepass", consumes = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<PasswordChangeResponse> changePassword(@Valid @RequestBody PasswordChangeRequest request,
                                                                     @AuthenticationPrincipal UserDetails userDetails) throws PasswordUpdateException {

            if (encoder.matches(request.getPassword(), userDetails.getPassword())) {
                throw new PasswordUpdateException("The passwords must be different!");
            }

            var currentUser = userService.findByEmail(userDetails.getUsername()).orElseThrow();
            currentUser.setPassword(encoder.encode(request.getPassword()));
            currentUser = userService.save(currentUser);
            return ResponseEntity.ok(PasswordChangeResponse.builder()
                    .email(currentUser.getEmail().toLowerCase()).status(PasswordChangeResponse.DEFAULT_STATUS)
                    .build());
        }

        @GetMapping(path = "/admin/user")
        public ResponseEntity<List<UserDto>> findAll() {
            final List<User> users = userService.findAll();
            return ResponseEntity.ok(users.isEmpty() ? List.of() : mapper.toList(users));
        }

        @DeleteMapping("/admin/user/{email}")
        public ResponseEntity<UserDeletionResponse> delete(@PathVariable String email, @AuthenticationPrincipal UserDetails userDetails) throws UserNotFoundException, AdminDeletionException {

            final User user = userService.findByEmail(userDetails.getUsername()).orElseThrow();
            if (user.isAdmin() && email.equals(userDetails.getUsername())) {
                throw new AdminDeletionException("Can't remove ADMINISTRATOR role!");
            }
            return ResponseEntity.ok(userService.deleteUserByEmail(email));
        }

        @PutMapping("/admin/user/role")
        public ResponseEntity<UserDto> updateRole(@Valid @RequestBody RoleUpdateRequest request) throws UserNotFoundException,
                RoleUpdateException, AdminDeletionException, InvalidRoleException {
            return ResponseEntity.ok(userService.updateRole(request));
        }
    }
  learner_created: true
- name: src/account/repository/GroupRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.user.Group;
    import account.model.user.Role;
    import org.springframework.data.repository.CrudRepository;

    import java.util.Optional;

    public interface GroupRepository extends CrudRepository<Group, Long> {

        Optional<Group> findByRole(Role role);
    }
  learner_created: true
- name: src/account/mapper/UserMapper.java
  visible: true
  text: |
    package account.mapper;

    import account.domain.user.UserDto;
    import account.model.user.Group;
    import account.model.user.Role;
    import account.model.user.User;
    import org.springframework.stereotype.Component;

    import java.util.List;
    import java.util.stream.Collectors;

    @Component
    public class UserMapper {

        public UserDto toDto(User user) {
            List<Role> roles = user.getGroups().stream().map(Group::getRole).sorted().collect(Collectors.toList());

            return UserDto.builder()
                    .id(user.getId())
                    .name(user.getName())
                    .lastname(user.getLastname())
                    .email(user.getEmail())
                    .roles(roles)
                    .build();
        }

        public List<UserDto> toList(List<User> users) {
            return users.stream().map(this::toDto).collect(Collectors.toList());
        }
    }
  learner_created: true
- name: src/account/exception/AccountServiceException.java
  visible: true
  text: |
    package account.exception;

    public class AccountServiceException extends Exception {

        public AccountServiceException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/model/payment/Payment.java
  visible: true
  text: |
    package account.model.payment;

    import account.model.user.User;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import javax.validation.constraints.*;

    @Entity
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    @SequenceGenerator(name = "sequencePayment", sequenceName = "PaymentSeq")
    public class Payment {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO, generator = "sequencePayment")
        private Long id;
        @ManyToOne
        @JoinColumn(name = "user_id")
        @NotNull(message = "employee email must not be empty")
        private User employee;
        @Pattern(regexp = "\\d{2}-\\d{4}", message = "Period has invalid format")
        private String period;
        @NotNull(message = "salary is incorrect")
        private Long salary;

        @AssertTrue(message = "payment period is not valid")
        public boolean isValidPeriod() {

            if (this.period == null) {
                return false;
            }

            int month = Integer.parseInt(period.split("-")[0]);
            return month > 0 && month < 12;
        }

        @AssertFalse(message = "Salary can not be negativ")
        public boolean validateSalary() {
            return this.salary != null && this.salary < 0L;
        }
    }
  learner_created: true
- name: src/account/exception/payment/PaymentNotFoundException.java
  visible: true
  text: |
    package account.exception.payment;

    public class PaymentNotFoundException extends Exception {

        public PaymentNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/model/user/RoleUpdateRequest.java
  visible: true
  text: |
    package account.model.user;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.NotEmpty;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class RoleUpdateRequest {

        @NotEmpty
        @JsonProperty("user")
        private String email;
        private String role;
        private String operation;
    }
  learner_created: true
- name: src/account/domain/AccountServiceCustomErrorMessage.java
  visible: true
  text: |
    package account.domain;

    import lombok.*;

    @Getter
    @Setter
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public class AccountServiceCustomErrorMessage {

        public static String DEFAULT_MESSAGE = "User exist!";

        private String timestamp;
        private int status;
        private String error;
        private String message;
        private String path;

        {
            this.message = DEFAULT_MESSAGE;
        }

        @Override
        public String toString() {
            return "{" +
                    "timestamp:'" + timestamp + '\'' +
                    ", status:" + status +
                    ", error:'" + error + '\'' +
                    ", message:'" + message + '\'' +
                    ", path:'" + path + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/domain/user/UserDeletionResponse.java
  visible: true
  text: |
    package account.domain.user;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    @Builder
    @AllArgsConstructor
    public class UserDeletionResponse {

        private String user;
        private String status;
    }
  learner_created: true
- name: src/account/model/event/Event.java
  visible: true
  learner_created: true
- name: src/account/repository/EventRepository.java
  visible: true
  learner_created: true
- name: src/account/service/event/EventService.java
  visible: true
  learner_created: true
- name: src/account/service/event/IEventService.java
  visible: true
  learner_created: true
- name: src/account/domain/user/UserAccessResponse.java
  visible: true
  learner_created: true
- name: src/account/util/exception/AccountStatusUpdateException.java
  visible: true
  learner_created: true
- name: src/account/controller/EventController.java
  visible: true
  learner_created: true
- name: src/account/model/user/UserAccessUpdateRequest.java
  visible: true
  learner_created: true
- name: src/account/util/LogEvent.java
  visible: true
  learner_created: true
- name: src/account/handler/AccountServiceAccessDeniedHandler.java
  visible: true
  text: |
    package account.handler;

    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    public class CustomAccessDeniedHandler implements AccessDeniedHandler {
        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null) {
                response.sendError(HttpStatus.FORBIDDEN.value(), "Access Denied!");
            }
        }
    }
  learner_created: true
- name: src/account/config/SecurityConfig.java
  visible: true
  text: |
    package account.config;

    import account.handler.CustomAccessDeniedHandler;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    @Configuration
    public class SecurityConfig extends WebSecurityConfigurerAdapter {

        private static final int ENCODER_STRENGTH = 13;
        private final UserDetailsService userDetailsService;
        private final RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        public SecurityConfig(UserDetailsService userDetailsService, RestAuthenticationEntryPoint entryPoint) {
            this.userDetailsService = userDetailsService;
            this.restAuthenticationEntryPoint = entryPoint;
        }

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .userDetailsService(userDetailsService)
                    .passwordEncoder(getEncoder());
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.exceptionHandling().accessDeniedHandler(accessDeniedHandler()).and()
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .mvcMatchers("/api/admin/**").hasRole("ADMINISTRATOR")
                    .mvcMatchers("/api/acct/**").hasRole("ACCOUNTANT")
                    .mvcMatchers(HttpMethod.POST, "/api/auth/changepass").hasAnyRole("USER", "ACCOUNTANT", "ADMINISTRATOR")
                    .mvcMatchers(HttpMethod.GET, "/api/empl/payment", "/api/empl/payment/*").hasAnyRole("USER", "ACCOUNTANT")
                    .antMatchers(HttpMethod.POST, "/api/signup").permitAll()
                    // other matchers
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }



        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder(ENCODER_STRENGTH);
        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler(){
            return new CustomAccessDeniedHandler();
        }
    }
  learner_created: true
- name: src/account/config/AuthenticationSuccessEventListener.java
  visible: true
  learner_created: true
- name: src/account/config/AuthenticationFailureEventListener.java
  visible: true
  learner_created: true
- name: src/account/controller/AdminController.java
  visible: true
  learner_created: true
- name: src/account/service/LoginAttemptService.java
  visible: true
  learner_created: true
- name: src/account/model/event/EventBuilder.java
  visible: true
  learner_created: true
- name: src/account/domain/EventDto.java
  visible: true
  learner_created: true
- name: src/account/mapper/EventMapper.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 22 Oct 2022 20:16:21 UTC
record: 6
